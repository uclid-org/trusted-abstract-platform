module cow_cpu {

type * = ap_types.*;
const * = ap_types.*;
function * = ap_types.*;
define * = ap_types.*;


instance cache : abstract_cache();

//
// CPU state
//
var cpu_mem         : mem_t;
var cpu_regs        : regs_t;
var cpu_pc          : vaddr_t;
var cpu_enclave_id  : tap_enclave_id_t;
var cpu_addr_valid  : addr_valid_t;
var cpu_addr_map    : addr_map_t;
var cpu_owner_map   : owner_map_t;

// New state for FAAS
// Note that we originally wanted to separate state between the CPU and SM but 
// this needs to go in here so that we support clones accessing their source enclaves.
sharedvar tap_enclave_metadata_parent : tap_enclave_metadata_parent_t;
sharedvar tap_enclave_metadata_wap_addr_free : tap_enclave_metadata_wap_addr_free_t;
//
// CPU Flags
//
var cpu_cache_enabled : boolean;




//
// CPU Procedures 
//
procedure initialize_cache() 
  modifies cache;
{
  call cache.init_cache();
}

procedure [inline] set_cache(_valid_map: cache_valid_map_t, _tag_map : cache_tag_map_t)
  modifies cache;
{
  call cache.set_cache_state(_valid_map, _tag_map);
}

procedure [inline] set_cpu_state(
  _cpu_enclave_id : tap_enclave_id_t,
  _cpu_addr_map   : addr_map_t,
  _cpu_addr_valid : addr_valid_t,
  _cpu_pc         : vaddr_t,
  _cpu_regs       : regs_t
)
  modifies cpu_enclave_id;
  modifies cpu_addr_map;
  modifies cpu_addr_valid;
  modifies cpu_pc;
  modifies cpu_regs;
{
  cpu_enclave_id = _cpu_enclave_id;
  cpu_addr_map   = _cpu_addr_map;
  cpu_addr_valid = _cpu_addr_valid;
  cpu_pc         = _cpu_pc;
  cpu_regs       = _cpu_regs;
}


procedure [inline] update_cpu_owner_map(paddr : wap_addr_t, eid : tap_enclave_id_t)
  modifies cpu_owner_map;
{
  cpu_owner_map[paddr] = eid;
}

procedure [inline] update_cpu_mem(paddr : wap_addr_t, word : word_t)
  modifies cpu_mem;
{
  cpu_mem[paddr] = word;
}

procedure [inline] update_cpu_addr_valid(vaddr : vaddr_t, valid : addr_perm_t)
  modifies cpu_addr_valid;
{
  cpu_addr_valid[vaddr] = valid;
}

procedure [inline] update_cpu_addr_map(vaddr : vaddr_t, paddr : wap_addr_t)
  modifies cpu_addr_map;
{
  cpu_addr_map[vaddr] = paddr;
}

procedure [inline] update_cpu_regs(idx : regindex_t, word : word_t)
  modifies cpu_regs;
{
  cpu_regs[idx] = word;
}



procedure [inline] set_cpu_owner_map(_cpu_owner_map : owner_map_t)
  modifies cpu_owner_map;
{
  cpu_owner_map = _cpu_owner_map;
}

procedure [inline] set_cpu_mem(_cpu_mem : mem_t)
  modifies cpu_mem;
{
  cpu_mem = _cpu_mem;
}

procedure [inline] set_cpu_addr_valid(_cpu_addr_valid : addr_valid_t)
  modifies cpu_addr_valid;
{
  cpu_addr_valid = _cpu_addr_valid;
}

procedure [inline] set_cpu_addr_map(_cpu_addr_map : addr_map_t)
  modifies cpu_addr_map;
{
  cpu_addr_map = _cpu_addr_map;
}


procedure [inline] set_cpu_pc(_cpu_pc : vaddr_t)
  modifies cpu_pc;
{
  cpu_pc = _cpu_pc;
}

procedure [inline] set_cpu_regs(_cpu_regs : regs_t)
  modifies cpu_regs;
{
  cpu_regs = _cpu_regs;
}


procedure [inline] havoc_cpu_mem()
  modifies cpu_mem;
{
  havoc cpu_mem;
}

procedure [inline] havoc_cpu_owner_map()
  modifies cpu_owner_map;
{
  havoc cpu_owner_map;
}

procedure [inline] havoc_cpu_pc()
  modifies cpu_pc;
{
  havoc cpu_pc;
}

procedure [inline] havoc_cpu_regs()
  modifies cpu_regs;
{
  havoc cpu_regs;
}

procedure [inline] fetch_va(vaddr : vaddr_t, repl_way : cache_way_index_t)
  returns (data : word_t, excp : exception_t, hit : boolean)
  requires valid_cache_way_index(repl_way);
  modifies cpu_addr_valid;
  modifies cache;
{
  var paddr : wap_addr_t;
  var owner_eid : tap_enclave_id_t;
  var hit_way : cache_way_index_t;
  
  // default
  data = k0_word_t;
  hit = false;


  
  // translate VA -> PA
  if (!tap_addr_perm_x(cpu_addr_valid[vaddr])) {
    excp = excp_os_protection_fault; 
  } else {
    paddr = cpu_addr_map[vaddr];
    // are we not allowed to access this memory
    // Allowing a child to fetch from its parents memory
    owner_eid = cpu_owner_map[paddr];
    if (owner_eid != tap_null_enc_id && 
       (owner_eid != cpu_enclave_id && owner_eid != tap_enclave_metadata_parent[cpu_enclave_id])) 
    {
      excp = excp_tp_protection_fault; 
    } else {
      // update accessed bit
      cpu_addr_valid[vaddr] = tap_set_addr_perm_a(cpu_addr_valid[vaddr]);
      // perform load
      data = cpu_mem[paddr];
      excp = excp_none;
      // update cahce
      if (cpu_cache_enabled) {
        assert(valid_cache_way_index(repl_way));
        call (hit, hit_way) = cache.query_cache(paddr, repl_way);
      }
    }
  }
}

procedure [inline] load_va(vaddr : vaddr_t, repl_way : cache_way_index_t)
  returns (data : word_t, excp : exception_t, hit : boolean)
  requires valid_cache_way_index(repl_way);
  ensures (!tap_addr_perm_r(old(cpu_addr_valid)[vaddr]) ||
           (cpu_owner_map[cpu_addr_map[vaddr]] != tap_null_enc_id && 
            cpu_owner_map[cpu_addr_map[vaddr]] != cpu_enclave_id  && 
            cpu_owner_map[cpu_addr_map[vaddr]] != tap_enclave_metadata_parent[cpu_enclave_id]))
            ==> (hit == false);
  ensures (forall (p : wap_addr_t, w : cache_way_index_t) ::
            (paddr2set(p) != paddr2set(cpu_addr_map[vaddr]) || w != repl_way)
              ==> ((cache.cache_valid_map[paddr2set(p), w] == old(cache.cache_valid_map)[paddr2set(p), w]) &&
                   (cache.cache_tag_map[paddr2set(p), w] == old(cache.cache_tag_map)[paddr2set(p), w])));

  ensures (excp == excp_none && cpu_cache_enabled && !hit)
              ==> ((cache.cache_valid_map[paddr2set(old(cpu_addr_map)[vaddr]), repl_way] == true) &&
                    (cache.cache_tag_map[paddr2set(old(cpu_addr_map)[vaddr]), repl_way] == paddr2tag(old(cpu_addr_map)[vaddr])));
  ensures (!cpu_cache_enabled) ==> (cache.cache_valid_map == old(cache.cache_valid_map) && cache.cache_tag_map == old(cache.cache_tag_map));
  ensures (excp == excp_none || excp == excp_os_protection_fault || excp == excp_tp_protection_fault);


  modifies cpu_addr_valid;
  modifies cache;
{
  var paddr : wap_addr_t;
  var owner_eid : tap_enclave_id_t;
  var hit_way : cache_way_index_t;
  
  // default 
  data = k0_word_t;
  hit = false;
  excp = excp_none;



  // translate VA -> PA
  if (!tap_addr_perm_r(cpu_addr_valid[vaddr])) {
    excp = excp_os_protection_fault; 
  } else {
    paddr = cpu_addr_map[vaddr];
    // are we not allowed to access this memory
    // Allow a child to read its parents memory
    owner_eid = cpu_owner_map[paddr];
    if (owner_eid != tap_null_enc_id && 
       (owner_eid != cpu_enclave_id && owner_eid != tap_enclave_metadata_parent[cpu_enclave_id])) 
    {
      excp = excp_tp_protection_fault; 
    } else {
      // update accessed bit
      cpu_addr_valid[vaddr] = tap_set_addr_perm_a(cpu_addr_valid[vaddr]);
      // perform load
      data = cpu_mem[paddr];
      excp = excp_none;
      // update cache
      if (cpu_cache_enabled) {
        call (hit, hit_way) = cache.query_cache(paddr, repl_way);
      }
    }
  }
}

procedure [inline] store_va(vaddr : vaddr_t, data : word_t, repl_way : cache_way_index_t)
  returns (excp : exception_t, hit : boolean)
  requires (cpu_enclave_id != tap_invalid_enc_id);
  requires valid_cache_way_index(repl_way);
  requires tap_enclave_metadata_parent[tap_null_enc_id] == tap_invalid_enc_id;
  requires (forall (p : wap_addr_t) :: cpu_owner_map[p] != tap_invalid_enc_id);
  requires (forall (eid : tap_enclave_id_t, pa : wap_addr_t) :: tap_enclave_metadata_wap_addr_free[eid][pa] ==> cpu_owner_map[pa] == eid);
  requires (cpu_enclave_id != tap_invalid_enc_id);
  requires (forall (eid : tap_enclave_id_t) :: eid != tap_invalid_enc_id ==> tap_enclave_metadata_parent[eid] != eid);
  ensures (forall (eid : tap_enclave_id_t, pa : wap_addr_t) :: tap_enclave_metadata_wap_addr_free[eid][pa] ==> cpu_owner_map[pa] == eid);
  

  ensures (excp != excp_none ==> cpu_mem == old(cpu_mem));
  ensures (excp != excp_none) ==> (cpu_addr_valid == old(cpu_addr_valid));
  ensures (excp != excp_none) ==> (cpu_addr_map == old(cpu_addr_map));
  ensures (excp == excp_none) ==> 
            (forall (va : vaddr_t) ::
              (va != vaddr)
                ==> (cpu_addr_valid[va] == old(cpu_addr_valid)[va]));
  ensures (excp == excp_none) 
            ==> (cpu_addr_valid[vaddr] == tap_set_addr_perm_a(old(cpu_addr_valid)[vaddr]));
  ensures (!tap_addr_perm_w(old(cpu_addr_valid)[vaddr]) ||
           (cpu_owner_map[cpu_addr_map[vaddr]] != tap_null_enc_id && cpu_owner_map[cpu_addr_map[vaddr]] != cpu_enclave_id && cpu_owner_map[cpu_addr_map[vaddr]] != tap_enclave_metadata_parent[cpu_enclave_id]))
          ==> (hit == false);
  ensures (forall (p : wap_addr_t, w : cache_way_index_t) ::
            (paddr2set(p) != paddr2set(cpu_addr_map[vaddr]) || w != repl_way)
              ==> ((cache.cache_valid_map[paddr2set(p), w] == old(cache.cache_valid_map)[paddr2set(p), w]) &&
                   (cache.cache_tag_map[paddr2set(p), w] == old(cache.cache_tag_map)[paddr2set(p), w])));
  ensures (forall (v : vaddr_t) ::
          (v != vaddr) ==> (cpu_addr_map[v] == old(cpu_addr_map)[v])); 


  ensures (!cpu_cache_enabled) ==> (cache.cache_valid_map == old(cache.cache_valid_map) && cache.cache_tag_map == old(cache.cache_tag_map));

  
  modifies cpu_mem;
  modifies cpu_addr_valid;
  modifies cache;
  modifies cpu_addr_map;
  modifies tap_enclave_metadata_wap_addr_free;
{   
  var paddr : wap_addr_t;
  var owner_eid : tap_enclave_id_t;
  var hit_way : cache_way_index_t;
  
  // default
  hit = false;
  excp = excp_none;

  //translate VA -> PA
  if (!tap_addr_perm_w(cpu_addr_valid[vaddr])) {
    excp = excp_os_protection_fault; ;
  } 

  if (excp == excp_none) {
    paddr = cpu_addr_map[vaddr];
    // are we not allowed to access this memory
    // Allow a child to COW its parents memory
    owner_eid = cpu_owner_map[paddr];
    if (owner_eid != tap_null_enc_id && 
       (owner_eid != cpu_enclave_id && owner_eid != tap_enclave_metadata_parent[cpu_enclave_id])) 
    {
      excp = excp_tp_protection_fault; 
    } 
  }

  if (excp == excp_none) {
      // Although this is included in the CPU model, this is actually managed by the SM.
      if (owner_eid == tap_enclave_metadata_parent[cpu_enclave_id]) {
          // Do COW
          var found: boolean;
          var new_paddr: wap_addr_t;
          var paddr: wap_addr_t;
          var wap_addr_free_map : [wap_addr_t]boolean;


          // Sanity check
          assert (cpu_enclave_id != tap_null_enc_id);
          assert (owner_eid != cpu_enclave_id);

          found = false;
          paddr = k0_wap_addr_t;

          // Need to find new physical address, by looking at the free pool for the current enclave
          while (LT_wapa(paddr, kmax_wap_addr_t) && found == false)
              invariant ((found == false) ==> 
                  (forall (pa : wap_addr_t) ::
                      (LT_wapa(pa, paddr) ==> (tap_enclave_metadata_wap_addr_free[cpu_enclave_id][pa] == false))));
          {
              if (tap_enclave_metadata_wap_addr_free[cpu_enclave_id][paddr]) {
                  found = true;
                  new_paddr = paddr;
              }
              paddr = PLUS_wapa(paddr, k1_wap_addr_t);
          }

          if (found == false) {
              if (tap_enclave_metadata_wap_addr_free[cpu_enclave_id][paddr]) {
                  found = true;
                  new_paddr = paddr;
              }
          }

          wap_addr_free_map = tap_enclave_metadata_wap_addr_free[cpu_enclave_id] ;
          wap_addr_free_map[new_paddr] = false;
          tap_enclave_metadata_wap_addr_free[cpu_enclave_id] = wap_addr_free_map;
          
          if (found == false) {
              // TODO: This means that we couldn't find any free physical memory
              excp = excp_out_of_memory_fault;
          } else {
              assert (cpu_owner_map[new_paddr] == cpu_enclave_id);
              cpu_addr_map[vaddr] = new_paddr;
              // update accessed bit
              cpu_addr_valid[vaddr] = tap_set_addr_perm_a(cpu_addr_valid[vaddr]);
              
              // perform store
              cpu_mem[new_paddr] = data;
              // update cache
              if (cpu_cache_enabled) {
                  call (hit, hit_way) = cache.query_cache(new_paddr, repl_way);
              }
          }
      } else {
          assert (cpu_owner_map[cpu_addr_map[vaddr]] == cpu_enclave_id ||
                  cpu_owner_map[cpu_addr_map[vaddr]] == tap_null_enc_id);
          // update accessed bit
          cpu_addr_valid[vaddr] = tap_set_addr_perm_a(cpu_addr_valid[vaddr]);
          // perform store
          cpu_mem[paddr] = data;
          excp = excp_none;
          // update cache
          if (cpu_cache_enabled) {
            call (hit, hit_way) = cache.query_cache(paddr, repl_way);
          }

      }
  }
  assert (forall (v : vaddr_t) ::
            (v != vaddr) ==> (cpu_addr_valid[v] == old(cpu_addr_valid)[v])); 
  assert (forall (v : vaddr_t) ::
            (v != vaddr) ==> (cpu_addr_map[v] == old(cpu_addr_map)[v])); 

}


control {
  set_solver_option(":mbqi", false);
  set_solver_option(":threads", 4);

  fetch_va_verif = verify(fetch_va);
  load_va_verif = verify(load_va);
  store_va_verif = verify(store_va);


  check;
  print_results;
}

}


