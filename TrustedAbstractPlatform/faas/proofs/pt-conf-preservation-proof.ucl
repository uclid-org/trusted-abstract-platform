module pt_confidentiality_preservation_proof {

type * = proof_common.*;
const * = proof_common.*;
function * = proof_common.*;
define * = proof_common.*;

instance cpu_1 : faas_tap();
instance cpu_2 : faas_tap();


procedure ProvePTConfPreservation(
    /* cache    */  cache_conflict : boolean,
    /* page tbl */  obs_pt_ev_read : boolean
)
    modifies cpu_1;
    modifies cpu_2;
{
    var eid, p_eid, r_eid, r_parent_eid               : tap_enclave_id_t;
    var status, status_1, status_2                    : enclave_op_result_t;
    var e_addr_valid                                  : addr_valid_t;
    var e_addr_map                                    : addr_map_t;
    var e_excl_vaddr                                  : excl_vaddr_t;
    var e_excl_map, p_e_excl_map                      : excl_map_t;
    var e_bounds, p_e_bounds                          : bounds_t;
    var e_container_data                              : container_data_t;
    var e_entrypoint                                  : vaddr_t;
    var e_proof_op, r_proof_op                        : tap_proof_op_t;
    var r_regs                                        : regs_t;
    var current_mode_1, current_mode_2, current_mode  : mode_t;
    var enclave_dead, done                            : boolean;
    var r_paddr                                       : wap_addr_t;
    var r_word                                        : word_t;
    var vaddr_1, vaddr_2                              : vaddr_t;
    var paddr_1, paddr_2                              : wap_addr_t;
    var data_1, data_2                                : word_t;
    var iter                                          : integer;
    var load_addr_1, load_addr_2                     : vaddr_t;
    var store_addr_1, store_addr_2                   : vaddr_t;
    var store_data_1, store_data_2                   : word_t;
    var r_addr_valid                                 : addr_valid_t;
    var r_addr_map                                   : addr_map_t;
    var r_excl_vaddr                                 : excl_vaddr_t;
    var r_excl_map                                   : excl_map_t;
    var r_bounds                                     : bounds_t;
    var r_bmap                                       : excl_map_t;
    var r_bmap_bounds                                : bounds_t;
    var r_container_valid                            : container_valid_t;
    var r_container_data                             : container_data_t;
    var r_entrypoint                                 : vaddr_t;
    var r_l_way, r_s_way                             : cache_way_index_t;
    var r_pc                                         : vaddr_t;
    var r_read                                       : regindex_t;
    var r_write                                      : regindex_t;
    var r_data                                       : word_t;
    var r_pt_eid                                     : tap_enclave_id_t;
    var r_pt_va                                      : vaddr_t;
    var pt_eid                                       : tap_enclave_id_t;
    var pt_vaddr                                     : vaddr_t;
    var pt_valid                                     : addr_perm_t;
    var pt_paddr                                     : wap_addr_t;
    var l_vaddr                                      : vaddr_t;
    var s_vaddr                                      : vaddr_t;
    var s_data                                       : word_t;
    var l_way, s_way                                 : cache_way_index_t;
    var excp_1_1, excp_1_2, excp_2_1, excp_2_2       : exception_t;
    var hit_1_1, hit_1_2, hit_2_1, hit_2_2           : boolean;
    var p_eid_valid_1, p_eid_valid_2                 : boolean;
    var observation, observation_1, observation_2    : word_t;

    assume (!obs_pt_ev_read ==> cpu_1.block_os_ev_read);

    


    // initialize state of first cpu
    call (current_mode) = cpu_1.InitialHavoc();
    assert tap_addr_perm_x(cpu_1.cpu.cpu_addr_valid[cpu_1.cpu.cpu_pc]);
    assert cpu_1.cpu.cpu_owner_map[cpu_1.cpu.cpu_addr_map[cpu_1.cpu.cpu_pc]] == cpu_1.cpu.cpu_enclave_id;
    assert cpu_1.cpu.cpu_enclave_id == tap_null_enc_id;
    // initialize the untrusted (OS) state with sane values.
    call cpu_1.InitUntrustedState(cpu_1.cpu.cpu_addr_valid, cpu_1.cpu.cpu_addr_map, cpu_1.cpu.cpu_pc);
    // launch should not leave the PC in an untenable sitation.
    assume !e_excl_map[cpu_1.cpu.cpu_addr_map[cpu_1.cpu.cpu_pc]];

    //assert(false);
    

    // Launch via a clone
    call (status_1) = cpu_1.launch(p_eid, e_addr_valid, e_addr_map, e_excl_vaddr, p_e_excl_map, p_e_bounds, e_entrypoint);
    assume cpu_1.tap_enclave_metadata_cache_conflict[p_eid] == cache_conflict;
    assume status_1 == enclave_op_success;

    //assert(false);

    //assert(false);


    call (status_1) = cpu_1.enter(p_eid);
    assume status_1 == enclave_op_success;

    //assert(false);

    enclave_dead = false;
    current_mode = mode_enclave;

    while (current_mode == mode_enclave) 
        //----------------------------------------------------------------------//
        // global TAP invariants.                                               //
        //----------------------------------------------------------------------//
        invariant  (forall (pa : wap_addr_t, e : tap_enclave_id_t) ::
                    (valid_enclave_id(e) && !cpu_1.tap_enclave_metadata_valid[e]) ==> 
                        (cpu_1.cpu.cpu_owner_map[pa] != e));
        invariant (forall (pa: wap_addr_t, e : tap_enclave_id_t) ::
                    cpu_1.tap_enclave_metadata_wap_addr_free[e][pa] ==> cpu_1.cpu.cpu_owner_map[pa] == e);
        invariant (forall (e: tap_enclave_id_t) :: cpu_1.tap_enclave_metadata_child_count[e] >= 0);


        // p_eid is valid.
        invariant valid_enclave_id(p_eid); 
        invariant !enclave_dead ==>
                    (cpu_1.tap_enclave_metadata_valid[p_eid]);
        // cpu.cpu_enclave_id is never blocked_enclave_id
        invariant (cpu_1.cpu.cpu_enclave_id != tap_blocked_enc_id);
        // the entrypoint always has an executable vaddr -> paddr mapping.
        invariant !enclave_dead ==>
                    tap_addr_perm_x(cpu_1.tap_enclave_metadata_addr_valid[p_eid][cpu_1.tap_enclave_metadata_entrypoint[p_eid]]);
        invariant !enclave_dead ==>
                    cpu_1.tap_enclave_metadata_addr_excl[p_eid][cpu_1.tap_enclave_metadata_entrypoint[p_eid]];
        // the pc always has an executable vaddr -> paddr mapping. 
        invariant !enclave_dead ==>
                    tap_addr_perm_x(cpu_1.tap_enclave_metadata_addr_valid[p_eid][cpu_1.tap_enclave_metadata_pc[p_eid]]);
        invariant !enclave_dead ==>
                    cpu_1.tap_enclave_metadata_addr_excl[p_eid][cpu_1.tap_enclave_metadata_pc[p_eid]];
        // the cpu.cpu_owner_map and enclave's excl_map are consistent.
        invariant (forall (pa: wap_addr_t) :: 
                    !enclave_dead ==> (cpu_1.cpu.cpu_owner_map[pa] == p_eid <==> p_e_excl_map[pa]));
        invariant (!enclave_dead) ==>
                     (cpu_1.tap_enclave_metadata_addr_excl[p_eid] == e_excl_vaddr);
        invariant (!enclave_dead) ==>
                     (cpu_1.tap_enclave_metadata_bounds_valid[p_eid] == true);
        invariant (!enclave_dead) ==>
                     (cpu_1.tap_enclave_metadata_region_bounds[p_eid] == p_e_bounds);


        // the two vaddr->paddr maps are the same.
        invariant (forall (va : vaddr_t) :: (!enclave_dead && e_excl_vaddr[va]) ==>
                     (cpu_1.tap_enclave_metadata_addr_map[p_eid][va] == e_addr_map[va]));
        // excl_vaddrs are excl_paddrs.
        invariant (forall (v : vaddr_t, p : wap_addr_t) :: (!enclave_dead && e_excl_vaddr[v] && p == e_addr_map[v]) ==> 
                        (cpu_1.cpu.cpu_owner_map[p] == p_eid ||
                         cpu_1.cpu.cpu_owner_map[p] == cpu_1.tap_enclave_metadata_parent[p_eid]));
        // invariants about the states of the CPUs.
        // are we in attacker mode?
        invariant (current_mode == mode_untrusted) ==> (cpu_1.cpu.cpu_enclave_id != p_eid);
        // if we are in trusted mode, we mean our enclave. 
        invariant (current_mode == mode_enclave ==> 
                    (cpu_1.cpu.cpu_enclave_id == p_eid));
        invariant current_mode == mode_enclave ==> cpu_1.cpu.cpu_enclave_id == p_eid;
        // the CPU state is also the same in trusted mode.
        invariant (current_mode == mode_enclave ==> tap_addr_perm_x(cpu_1.cpu.cpu_addr_valid[cpu_1.cpu.cpu_pc]));
        invariant (current_mode == mode_enclave ==> cpu_1.tap_enclave_metadata_addr_excl[p_eid][cpu_1.cpu.cpu_pc]);
        invariant (current_mode == mode_enclave ==> cpu_1.cpu.cpu_owner_map[cpu_1.cpu.cpu_addr_map[cpu_1.cpu.cpu_pc]] == p_eid);
        // But note cpu.cpu_addr_valid may differ from the tap_enclave_metadata_addr_valid because 
        // the accessed bit is set in the form.
        invariant (forall (va : vaddr_t) ::
                    (current_mode == mode_enclave) ==>
                        tap_addr_perm_eq(cpu_1.tap_enclave_metadata_addr_valid[p_eid][va], cpu_1.cpu.cpu_addr_valid[va]));
        invariant (forall (va : vaddr_t) ::
                    (current_mode == mode_enclave && e_excl_vaddr[va]) ==>
                        (e_addr_map[va] == cpu_1.cpu.cpu_addr_map[va]));
        invariant current_mode != mode_enclave ==> cpu_1.tap_enclave_metadata_is_snapshot[p_eid] == true;

    {
        havoc e_proof_op;
        assume tap_proof_op_valid_in_enclave(e_proof_op);
        assume (e_proof_op != tap_proof_op_pause && e_proof_op != tap_proof_op_exit);

        // trace_1
        call (current_mode, load_addr_1, l_way, store_addr_1, store_data_1, s_way) = 
                            cpu_1.EnclaveStep(current_mode, p_eid, e_proof_op);


        //assert(false);

    }

    //assert(false);

    assert (cpu_1.tap_enclave_metadata_is_snapshot[p_eid] == true);


    assert current_mode == mode_untrusted;
    assert cpu_1.cpu.cpu_enclave_id == tap_null_enc_id;
    done = false;
    //assert(false);


    while (!done) 
        //----------------------------------------------------------------------//
        // global TAP invariants.                                               //
        //----------------------------------------------------------------------//
        invariant  (forall (pa : wap_addr_t, e : tap_enclave_id_t) ::
                    (valid_enclave_id(e) && !cpu_1.tap_enclave_metadata_valid[e]) ==> 
                        (cpu_1.cpu.cpu_owner_map[pa] != e));
        invariant (forall (pa: wap_addr_t, e : tap_enclave_id_t) ::
                    cpu_1.tap_enclave_metadata_wap_addr_free[e][pa] ==> cpu_1.cpu.cpu_owner_map[pa] == e);
        invariant (forall (e: tap_enclave_id_t) :: cpu_1.tap_enclave_metadata_child_count[e] >= 0);


        // p_eid is valid.
        invariant valid_enclave_id(p_eid); 
        invariant !enclave_dead ==>
                    (cpu_1.tap_enclave_metadata_valid[p_eid]);
        // cpu.cpu_enclave_id is never blocked_enclave_id
        invariant (cpu_1.cpu.cpu_enclave_id != tap_blocked_enc_id);
        // the entrypoint always has an executable vaddr -> paddr mapping.
        invariant !enclave_dead ==>
                    tap_addr_perm_x(cpu_1.tap_enclave_metadata_addr_valid[p_eid][cpu_1.tap_enclave_metadata_entrypoint[p_eid]]);
        invariant !enclave_dead ==>
                    cpu_1.tap_enclave_metadata_addr_excl[p_eid][cpu_1.tap_enclave_metadata_entrypoint[p_eid]];
        // the pc always has an executable vaddr -> paddr mapping. 
        invariant !enclave_dead ==>
                    tap_addr_perm_x(cpu_1.tap_enclave_metadata_addr_valid[p_eid][cpu_1.tap_enclave_metadata_pc[p_eid]]);
        invariant !enclave_dead ==>
                    cpu_1.tap_enclave_metadata_addr_excl[p_eid][cpu_1.tap_enclave_metadata_pc[p_eid]];
        // the cpu.cpu_owner_map and enclave's excl_map are consistent.
        invariant (forall (pa: wap_addr_t) :: 
                    !enclave_dead ==> (cpu_1.cpu.cpu_owner_map[pa] == p_eid <==> p_e_excl_map[pa]));
        invariant (!enclave_dead) ==>
                     (cpu_1.tap_enclave_metadata_addr_excl[p_eid] == e_excl_vaddr);
        invariant (!enclave_dead) ==>
                     (cpu_1.tap_enclave_metadata_bounds_valid[p_eid] == true);
        invariant (!enclave_dead) ==>
                     (cpu_1.tap_enclave_metadata_region_bounds[p_eid] == p_e_bounds);


        // the two vaddr->paddr maps are the same.
        invariant (forall (va : vaddr_t) :: (!enclave_dead && e_excl_vaddr[va]) ==>
                     (cpu_1.tap_enclave_metadata_addr_map[p_eid][va] == e_addr_map[va]));
        // excl_vaddrs are excl_paddrs.
        invariant (forall (v : vaddr_t, p : wap_addr_t) :: (!enclave_dead && e_excl_vaddr[v] && p == e_addr_map[v]) ==> 
                        (cpu_1.cpu.cpu_owner_map[p] == p_eid ||
                         cpu_1.cpu.cpu_owner_map[p] == cpu_1.tap_enclave_metadata_parent[p_eid]));
        // invariants about the states of the CPUs.
        // are we in attacker mode?
        invariant (current_mode == mode_untrusted) ==> (cpu_1.cpu.cpu_enclave_id != p_eid);
        // if we are in trusted mode, we mean our enclave. 
        invariant (current_mode == mode_enclave ==> 
                    (cpu_1.cpu.cpu_enclave_id == p_eid));
        invariant current_mode == mode_enclave ==> cpu_1.cpu.cpu_enclave_id == p_eid;
        // the CPU state is also the same in trusted mode.
        invariant (current_mode == mode_enclave ==> tap_addr_perm_x(cpu_1.cpu.cpu_addr_valid[cpu_1.cpu.cpu_pc]));
        invariant (current_mode == mode_enclave ==> cpu_1.tap_enclave_metadata_addr_excl[p_eid][cpu_1.cpu.cpu_pc]);
        invariant (current_mode == mode_enclave ==> cpu_1.cpu.cpu_owner_map[cpu_1.cpu.cpu_addr_map[cpu_1.cpu.cpu_pc]] == p_eid);
        // But note cpu.cpu_addr_valid may differ from the tap_enclave_metadata_addr_valid because 
        // the accessed bit is set in the form.
        invariant (forall (va : vaddr_t) ::
                    (current_mode == mode_enclave) ==>
                        tap_addr_perm_eq(cpu_1.tap_enclave_metadata_addr_valid[p_eid][va], cpu_1.cpu.cpu_addr_valid[va]));
        invariant (forall (va : vaddr_t) ::
                    (current_mode == mode_enclave && e_excl_vaddr[va]) ==>
                        (e_addr_map[va] == cpu_1.cpu.cpu_addr_map[va]));
        //invariant cpu_1.tap_enclave_metadata_addr_valid[p_eid] == old_addr_valid;
        //invariant cpu_1.tap_enclave_metadata_addr_map[p_eid] == old_addr_map;
        
    {
        havoc done;
        havoc r_proof_op;   havoc r_eid;    havoc r_pc;   havoc r_read;   havoc r_write;
        havoc r_data;       havoc l_vaddr;  havoc s_vaddr;  havoc s_data;   havoc r_pt_eid;
        havoc r_pt_va;      havoc pt_eid;   havoc pt_vaddr; havoc pt_valid; havoc  pt_paddr;
        havoc  r_addr_valid; havoc r_addr_map; havoc r_excl_vaddr; havoc r_excl_map;
        havoc r_bmap;     havoc r_container_valid; havoc r_container_data; havoc r_entrypoint;
        havoc r_l_way;    havoc  r_s_way;

        // FAAS TAP
        havoc r_parent_eid;
        havoc r_bounds;
        havoc r_bmap_bounds;

        assume valid_regindex(r_read);
        assume valid_regindex(r_write);
        assume valid_cache_way_index(r_l_way);
        assume valid_cache_way_index(r_s_way);
        assume (r_eid != p_eid || r_proof_op != tap_proof_op_destroy);

        // trace_1
        call (observation, current_mode, enclave_dead, status_1, excp_1_1, excp_1_2, hit_1_1, hit_1_2) =
                                    cpu_1.ObserverStep(k_pt_observer_t, current_mode, p_eid, p_eid, p_eid_valid_1, r_eid, r_parent_eid, r_proof_op, 
                                                r_pc, r_read, r_write, r_data, 
                                                l_vaddr, s_vaddr, s_data,
                                                r_pt_eid, r_pt_va,
                                                pt_eid, pt_vaddr, pt_valid, pt_paddr,
                                                r_addr_valid, r_addr_map, r_excl_vaddr,
                                                r_excl_map, r_bounds, r_container_valid, r_container_data,
                                                r_entrypoint, r_bmap, r_bmap_bounds,
                                                r_l_way, r_s_way);

        
        
        assert enclave_dead == false;
        assert current_mode == mode_untrusted;

        //assert(false);
    }

    //assert(false);

    if (cpu_1.cpu.cpu_enclave_id != tap_null_enc_id) {
        call (status) = cpu_1.pause();
        assert status == enclave_op_success;
    }


    call cpu_2.SetInitState(
      cpu_1.cpu.cpu_mem,
      cpu_1.cpu.cpu_regs,
      cpu_1.cpu.cpu_pc,
      cpu_1.cpu.cpu_enclave_id,
      cpu_1.cpu.cpu_addr_valid,
      cpu_1.cpu.cpu_addr_map,
      cpu_1.cpu.cpu_owner_map,
      cpu_1.cpu.cache.cache_valid_map,
      cpu_1.cpu.cache.cache_tag_map,
      cpu_1.untrusted_addr_valid,
      cpu_1.untrusted_addr_map,
      cpu_1.untrusted_regs,
      cpu_1.untrusted_pc,
      cpu_1.tap_enclave_metadata_valid,
      cpu_1.tap_enclave_metadata_addr_map,
      cpu_1.tap_enclave_metadata_addr_valid,
      cpu_1.tap_enclave_metadata_addr_excl,
      cpu_1.tap_enclave_metadata_entrypoint,
      cpu_1.tap_enclave_metadata_pc,
      cpu_1.tap_enclave_metadata_regs,
      cpu_1.tap_enclave_metadata_paused,
      cpu_1.tap_enclave_metadata_cache_conflict,
      cpu_1.tap_enclave_metadata_is_snapshot,
      cpu_1.tap_enclave_metadata_child_count,
      cpu_1.tap_enclave_metadata_parent,
      cpu_1.tap_enclave_metadata_wap_addr_free,
      cpu_1.tap_enclave_metadata_postinit_measurement,
      cpu_1.tap_enclave_metadata_region_bounds,
      cpu_1.tap_enclave_metadata_bounds_valid
    );

    assume cpu_1.cpu.cpu_cache_enabled == cpu_2.cpu.cpu_cache_enabled;
    assume cpu_1.block_os_ev_read == cpu_2.block_os_ev_read;

    {
        var l_word_1, l_word_2 : word_t;
        var excp_1, excp_2 : exception_t;
        var hit_2_1, hit_2_2: boolean;
        var l_vaddr_1, l_vaddr_2: vaddr_t;
        var l_way_1, l_way_2: cache_way_index_t;
        var r_read_1, r_read_2: regindex_t;
        var pc_1, pc_2: vaddr_t;
        var word_1, word_2: word_t;
        var paddr_1, paddr_2: wap_addr_t;
        var eid_1, eid_2 : tap_enclave_id_t;
        var r_pt_eid : tap_enclave_id_t;
        var r_pt_va : vaddr_t;
        var valid_1, valid_2 : addr_perm_t;
        var paddr_1, paddr_2 : wap_addr_t;
        

        call (status_1) = cpu_1.clone(eid, p_eid, e_excl_map, e_bounds);
        assume cpu_1.tap_enclave_metadata_cache_conflict[eid] == cache_conflict;
        assume status_1 == enclave_op_success;


         // This assumption is necessary since the adversary knows that clone was invoked and trivially can find out which memory region is claimed. 
        //This is within the scope of our thread model/definition of confidentiality.
        assume (r_pt_eid != eid);

        // make observation.
        call (valid_1, paddr_1) = cpu_1.get_enclave_addr_map(r_pt_eid, r_pt_va);
        observation_1 = uf_observation_pt(valid_1, paddr_1);

        call (valid_2, paddr_2) = cpu_2.get_enclave_addr_map(r_pt_eid, r_pt_va);
        observation_2 = uf_observation_pt(valid_2, paddr_2);


        assert (!obs_pt_ev_read ==> valid_1 == valid_2);
        assert (!obs_pt_ev_read ==> paddr_1 == paddr_2);
        assert(!obs_pt_ev_read ==> observation_1 == observation_2);
        //assert(false);
    }

    

    //assert(false);


}




control {
  set_solver_option(":mbqi", false);
  set_solver_option(":case_split", 0);
  set_solver_option(":relevancy", 0);
  set_solver_option(":threads", 4);
  set_solver_option(":blast_full", true);
  set_solver_option(":timeout", 30000);
  verif_prove_integrity = verify(ProvePTConfPreservation);
  check;
  print_results;


  //print_module;

}

}
