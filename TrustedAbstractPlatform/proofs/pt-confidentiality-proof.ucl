module pt_confidentiality_proof {

type * = proof_common.*;
const * = proof_common.*;
function * = proof_common.*;
define * = proof_common.*;


instance cpu_1 : tap();
instance cpu_2 : tap();

procedure ProveConfidentialityPT(
    /* cache    */  cache_conflict : boolean,
    /* page tbl */  obs_pt_ev_read : boolean
  )
  modifies cpu_1;
  modifies cpu_2;
{
    var eid, r_eid                                   : tap_enclave_id_t;
    var status, status_1, status_2                   : enclave_op_result_t;
    var e_addr_valid_1, e_addr_valid_2               : addr_valid_t;
    var e_addr_map_1, e_addr_map_2                   : addr_map_t;
    var e_excl_vaddr                                 : excl_vaddr_t;
    var e_excl_map                                   : excl_map_t;
    var e_container_data_1, e_container_data_2       : container_data_t;
    var e_entrypoint_1, e_entrypoint_2               : vaddr_t;
    var current_mode, current_mode_1, current_mode_2 : mode_t;
    var enclave_dead, enclave_dead_1, enclave_dead_2 : boolean;
    var observation_1, observation_2                 : word_t;
    var e_proof_op, r_proof_op                       : tap_proof_op_t;
    var word_1, word_2                               : word_t;
    var paddr_1, paddr_2                             : wap_addr_t;
    var load_addr_1, load_addr_2                     : vaddr_t;
    var store_addr_1, store_addr_2                   : vaddr_t;
    var store_data_1, store_data_2                   : word_t;
    var r_addr_valid                                 : addr_valid_t;
    var r_addr_map                                   : addr_map_t;
    var r_excl_vaddr                                 : excl_vaddr_t;
    var r_excl_map                                   : excl_map_t;
    var r_bmap                                       : excl_map_t;
    var r_container_valid                            : container_valid_t;
    var r_container_data                             : container_data_t;
    var r_entrypoint                                 : vaddr_t;
    var r_pc                                         : vaddr_t;
    var r_read                                       : regindex_t;
    var r_write                                      : regindex_t;
    var r_data                                       : word_t;
    var r_pt_eid                                     : tap_enclave_id_t;
    var r_pt_va                                      : vaddr_t;
    var r_l_way, r_s_way                             : cache_way_index_t;
    var pt_eid                                       : tap_enclave_id_t;
    var pt_vaddr                                     : vaddr_t;
    var pt_valid                                     : addr_perm_t;
    var pt_paddr                                     : wap_addr_t;
    var l_vaddr                                      : vaddr_t;
    var s_vaddr                                      : vaddr_t;
    var s_data                                       : word_t;
    var l_way, s_way                                 : cache_way_index_t;
    var excp_1_1, excp_1_2, excp_2_1, excp_2_2       : exception_t;
    var hit_1_1, hit_1_2, hit_2_1, hit_2_2           : boolean;


    assume (!obs_pt_ev_read ==> cpu_1.block_os_ev_read);
    //TODO: Verify that these invariants are correct to add.
    assume (!obs_pt_ev_read ==> cpu_2.block_os_ev_read);
    assume (cpu_1.block_os_ev_read == cpu_2.block_os_ev_read);

    
    // initialize state of first cpu
    call (current_mode) = cpu_1.InitialHavoc();
    assert tap_addr_perm_x(cpu_1.cpu.cpu_addr_valid[cpu_1.cpu.cpu_pc]);
    assert cpu_1.cpu.cpu_owner_map[cpu_1.cpu.cpu_addr_map[cpu_1.cpu.cpu_pc]] == cpu_1.cpu.cpu_enclave_id;
    assert cpu_1.cpu.cpu_enclave_id == tap_null_enc_id;
    // initialize the untrusted (OS) state with sane values.
    call cpu_1.InitUntrustedState(cpu_1.cpu.cpu_addr_valid, cpu_1.cpu.cpu_addr_map, cpu_1.cpu.cpu_pc);

    call cpu_2.SetInitState(
        cpu_1.cpu.cpu_mem,
        cpu_1.cpu.cpu_regs,
        cpu_1.cpu.cpu_pc,
        cpu_1.cpu.cpu_enclave_id,
        cpu_1.cpu.cpu_addr_valid,
        cpu_1.cpu.cpu_addr_map,
        cpu_1.cpu.cpu_owner_map,
        cpu_1.cpu.cache.cache_valid_map,
        cpu_1.cpu.cache.cache_tag_map,
        cpu_1.untrusted_addr_valid,
        cpu_1.untrusted_addr_map,
        cpu_1.untrusted_regs,
        cpu_1.untrusted_pc,
        cpu_1.tap_enclave_metadata_valid,
        cpu_1.tap_enclave_metadata_addr_map,
        cpu_1.tap_enclave_metadata_addr_valid,
        cpu_1.tap_enclave_metadata_addr_excl,
        cpu_1.tap_enclave_metadata_entrypoint,
        cpu_1.tap_enclave_metadata_pc,
        cpu_1.tap_enclave_metadata_regs,
        cpu_1.tap_enclave_metadata_paused,
        cpu_1.tap_enclave_metadata_cache_conflict
    );


    // launch should not leave the PC in an untenable sitation.
    assume !e_excl_map[cpu_1.cpu.cpu_addr_map[cpu_1.cpu.cpu_pc]];


    // now launch enclave_1.
    call cpu_1.InitOSMem(e_excl_map, e_container_data_1);
    call (status) = cpu_1.launch(eid, e_addr_valid_1, e_addr_map_1,
                          e_excl_vaddr, e_excl_map, e_entrypoint_1);
    assume cpu_1.tap_enclave_metadata_cache_conflict[eid] == cache_conflict;
    assume status == enclave_op_success;

    // and then enclave_2
    call cpu_2.InitOSMem(e_excl_map, e_container_data_2);
    call (status) = cpu_2.launch(eid, e_addr_valid_2, e_addr_map_2,
                          e_excl_vaddr, e_excl_map, e_entrypoint_2);
    
    assume cpu_2.tap_enclave_metadata_cache_conflict[eid] == cache_conflict;
    assume status == enclave_op_success;

    
    assume (forall (v : vaddr_t) :: (!enclave_dead && !e_excl_vaddr[v]) ==>
                            (cpu_1.tap_enclave_metadata_addr_valid[eid][v] == 
                             cpu_2.tap_enclave_metadata_addr_valid[eid][v]));
    assume (forall (v : vaddr_t) :: (!enclave_dead && !e_excl_vaddr[v]) ==>
                            (cpu_1.tap_enclave_metadata_addr_map[eid][v] == 
                             cpu_2.tap_enclave_metadata_addr_map[eid][v]));

    assert valid_enclave_id(eid);


    // initial value of the observations.
    observation_1 = k0_word_t;
    observation_2 = k0_word_t;

    assert current_mode == mode_untrusted;
    current_mode = mode_untrusted;

    //assert(false);

    if (!enclave_dead) {
        havoc r_proof_op;   havoc r_eid;    havoc r_pc;   havoc r_read;   havoc r_write;
        havoc r_data;       havoc l_vaddr;  havoc s_vaddr;  havoc s_data;   havoc r_pt_eid;
        havoc r_pt_va;      havoc pt_eid;   havoc pt_vaddr; havoc pt_valid; havoc  pt_paddr;
        havoc  r_addr_valid; havoc r_addr_map; havoc r_excl_vaddr; havoc r_excl_map;            
        havoc r_bmap;     havoc r_container_valid; havoc r_container_data; havoc r_entrypoint;
        havoc r_l_way;    havoc  r_s_way;

        assume valid_regindex(r_read);
        assume valid_regindex(r_write);
        assume valid_cache_way_index(r_l_way);
        assume valid_cache_way_index(r_s_way);

  
        // trace_1

        call (observation_1, current_mode_1, enclave_dead_1, status_1, excp_1_1, excp_1_2, hit_1_1, hit_1_2) =
                                cpu_1.ObserverStep(k_pt_observer_t, current_mode, eid, r_eid, r_proof_op, 
                                            r_pc, r_read, r_write, r_data, 
                                            l_vaddr, s_vaddr, s_data,
                                            r_pt_eid, r_pt_va,
                                            pt_eid, pt_vaddr, pt_valid, pt_paddr,
                                            r_addr_valid, r_addr_map, r_excl_vaddr,
                                            r_excl_map, r_container_valid, r_container_data,
                                            r_entrypoint, r_bmap,
                                            r_l_way, r_s_way);
        
        
        // trace_2
        call (observation_2, current_mode_2, enclave_dead_2, status_2, excp_2_1, excp_2_2, hit_2_1, hit_2_2) =
                                cpu_2.ObserverStep(k_pt_observer_t, current_mode, eid, r_eid, r_proof_op, 
                                            r_pc, r_read, r_write, r_data, 
                                            l_vaddr, s_vaddr, s_data,
                                            r_pt_eid, r_pt_va,
                                            pt_eid, pt_vaddr, pt_valid, pt_paddr,
                                            r_addr_valid, r_addr_map, r_excl_vaddr,
                                            r_excl_map, r_container_valid, r_container_data,
                                            r_entrypoint, r_bmap,
                                            r_l_way, r_s_way);
        // some sanity checks.
        assert status_1 == status_2;
        assert current_mode_1 == current_mode_2;
        assert enclave_dead_1 == enclave_dead_2;
        current_mode = current_mode_1;
        enclave_dead = enclave_dead_2;
        //assert(false);
    }

    //assert(false);
    
    while (!enclave_dead)
        //// The property ////
        invariant (!obs_pt_ev_read) ==> (observation_1 == observation_2);
        invariant (forall (v : vaddr_t) :: (!enclave_dead && !e_excl_vaddr[v]) ==>
                            (cpu_1.tap_enclave_metadata_addr_valid[eid][v] == 
                             cpu_2.tap_enclave_metadata_addr_valid[eid][v]));
        invariant (forall (v : vaddr_t) :: (!enclave_dead && !e_excl_vaddr[v]) ==>
                            (cpu_1.tap_enclave_metadata_addr_map[eid][v] == 
                             cpu_2.tap_enclave_metadata_addr_map[eid][v]));

        //// General invariants /////
        invariant current_mode == mode_untrusted || current_mode == mode_enclave;
        // memory is not assigned to an enclave that doesn't exist.
        invariant (forall (pa : wap_addr_t, e : tap_enclave_id_t) ::
                    (valid_enclave_id(e) && !cpu_1.tap_enclave_metadata_valid[e]) ==> 
                        (cpu_1.cpu.cpu_owner_map[pa] != e));
        invariant (forall (pa : wap_addr_t, e : tap_enclave_id_t) ::
                    (valid_enclave_id(e) && !cpu_2.tap_enclave_metadata_valid[e]) ==> 
                        (cpu_2.cpu.cpu_owner_map[pa] != e));
        //-------------------------------------------------------------------//
        // CPU mode and CPU enclave ID must be consistent.
        //-------------------------------------------------------------------//
        invariant (forall (e : tap_enclave_id_t) :: 
                    !valid_enclave_id(e) ==> !cpu_1.tap_enclave_metadata_valid[tap_null_enc_id]);
        invariant (forall (e : tap_enclave_id_t) ::
                    !valid_enclave_id(e) ==> !cpu_2.tap_enclave_metadata_valid[tap_null_enc_id]);
        invariant (current_mode == mode_untrusted) ==> cpu_1.cpu.cpu_enclave_id != eid;
        invariant (current_mode == mode_untrusted) ==> cpu_2.cpu.cpu_enclave_id != eid;
        invariant (current_mode == mode_enclave) ==> (cpu_1.cpu.cpu_enclave_id == eid);
        invariant (current_mode == mode_enclave) ==> (cpu_2.cpu.cpu_enclave_id == eid);
        //-------------------------------------------------------------------//
        // Enclave 'eid' is mostly alive                                     //
        //-------------------------------------------------------------------//
        invariant (cpu_1.cpu.cpu_enclave_id != tap_blocked_enc_id);
        invariant (cpu_2.cpu.cpu_enclave_id != tap_blocked_enc_id);
        invariant (valid_enclave_id(eid));
        invariant (!enclave_dead ==> cpu_1.tap_enclave_metadata_valid[eid]);
        invariant (!enclave_dead ==> cpu_2.tap_enclave_metadata_valid[eid]);
        // maintain invariants about excl_vaddr.
        invariant (!enclave_dead) ==>
                        (cpu_1.tap_enclave_metadata_addr_excl[eid] == e_excl_vaddr);
        invariant (!enclave_dead) ==>
                        (cpu_2.tap_enclave_metadata_addr_excl[eid] == e_excl_vaddr);
        invariant (forall (v : vaddr_t) :: (!enclave_dead && !e_excl_vaddr[v]) ==>
                                (cpu_1.tap_enclave_metadata_addr_valid[eid][v] == 
                                 cpu_2.tap_enclave_metadata_addr_valid[eid][v]));
        invariant (forall (v : vaddr_t) :: (!enclave_dead && !e_excl_vaddr[v]) ==>
                                (cpu_1.tap_enclave_metadata_addr_map[eid][v] == 
                                 cpu_2.tap_enclave_metadata_addr_map[eid][v]));
        // invariants about addr_map
        invariant (forall (v : vaddr_t) ::
                      (!enclave_dead && e_excl_vaddr[v]) ==>
                          (cpu_1.tap_enclave_metadata_addr_map[eid][v] == e_addr_map_1[v]));
        invariant (forall (v : vaddr_t) ::
                      (!enclave_dead && e_excl_vaddr[v]) ==>
                          (cpu_2.tap_enclave_metadata_addr_map[eid][v] == e_addr_map_2[v]));
        // invariants about e_excl_addr
        invariant (forall (p : wap_addr_t) :: 
                    (!enclave_dead) ==> ((cpu_1.cpu.cpu_owner_map[p] == eid) <==> e_excl_map[p]));
        invariant (forall (p : wap_addr_t) :: 
                    (!enclave_dead) ==> ((cpu_2.cpu.cpu_owner_map[p] == eid) <==> e_excl_map[p]));
        invariant (forall (v : vaddr_t, p : wap_addr_t) :: 
                        (!enclave_dead && e_excl_vaddr[v] && (p == e_addr_map_1[v] || p == e_addr_map_2[v]))
                            ==> e_excl_map[p]);
        //-------------------------------------------------------------------//
        // Now deal with the enclaves.
        //-------------------------------------------------------------------//
        invariant (forall (v : vaddr_t) ::
                    (current_mode == mode_enclave && e_excl_vaddr[v]) ==> 
                        (cpu_1.cpu.cpu_addr_map[v] == e_addr_map_1[v]));
        invariant (forall (v : vaddr_t) ::
                    (current_mode == mode_enclave && e_excl_vaddr[v]) ==> 
                        (cpu_2.cpu.cpu_addr_map[v] == e_addr_map_2[v]));
        invariant (forall (v : vaddr_t) :: 
                        (current_mode == mode_enclave && !e_excl_vaddr[v]) ==> 
                            (cpu_1.cpu.cpu_addr_valid[v] == cpu_2.cpu.cpu_addr_valid[v]));
        invariant (forall (v : vaddr_t) :: 
                        (current_mode == mode_enclave && !e_excl_vaddr[v]) ==> 
                            (cpu_1.cpu.cpu_addr_map[v] == cpu_2.cpu.cpu_addr_map[v]));
        //-------------------------------------------------------------------//
        // CPU state is the same                                             //
        //-------------------------------------------------------------------//
        // same PC.
        invariant (current_mode == mode_untrusted) ==> (cpu_1.cpu.cpu_pc == cpu_2.cpu.cpu_pc);
        // same mode of operation.
        invariant (cpu_1.cpu.cpu_enclave_id == cpu_2.cpu.cpu_enclave_id);
        // same regs.
        invariant (current_mode == mode_untrusted) ==> (cpu_1.cpu.cpu_regs == cpu_2.cpu.cpu_regs);
        // same va->pa.
        invariant (current_mode == mode_untrusted) ==> 
                    (cpu_1.cpu.cpu_addr_valid == cpu_2.cpu.cpu_addr_valid);
        invariant (current_mode == mode_untrusted) ==> 
                        (cpu_1.cpu.cpu_addr_map == cpu_2.cpu.cpu_addr_map);
        // owner map is the same.
        invariant (forall (pa : wap_addr_t) :: (cpu_1.cpu.cpu_owner_map[pa] == cpu_2.cpu.cpu_owner_map[pa]));
        // addr_excl is the same for all eid.
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e]) ==>
                        (cpu_1.tap_enclave_metadata_addr_excl[e] == cpu_2.tap_enclave_metadata_addr_excl[e]));
        // memory is the same except for the enclave memory.
        invariant (forall (pa : wap_addr_t) :: !e_excl_map[pa] ==> (cpu_1.cpu.cpu_mem[pa] == cpu_2.cpu.cpu_mem[pa]));
        //-------------------------------------------------------------------//
        //// OS state is the same ////
        //-------------------------------------------------------------------//
        // OS va->pa 
        invariant (cpu_1.untrusted_addr_valid == cpu_2.untrusted_addr_valid);
        invariant (cpu_1.untrusted_addr_map == cpu_2.untrusted_addr_map);
        // OS regs.
        invariant (cpu_1.untrusted_regs == cpu_2.untrusted_regs);
        invariant (cpu_1.untrusted_pc == cpu_2.untrusted_pc);
        //-------------------------------------------------------------------//
        // Enclave state is the same except for eid (mostly). Some it is the //
        // the same for eid as well (addr_map and addr_excl).                //
        //-------------------------------------------------------------------//
        // valid is the same except for eid.
        invariant (forall (e : tap_enclave_id_t) :: (e != eid) ==>
                    (cpu_1.tap_enclave_metadata_valid[e] == cpu_2.tap_enclave_metadata_valid[e]));
        // addr valid is the same except for eid.
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e] && e != eid) ==>
                        (cpu_1.tap_enclave_metadata_addr_valid[e] == cpu_2.tap_enclave_metadata_addr_valid[e]));
        // the addr_map is the same for all enclaves.
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e] && e != eid) ==>
                        (cpu_1.tap_enclave_metadata_addr_map[e] == cpu_2.tap_enclave_metadata_addr_map[e]));
        // entrypoints are the same except for eid.
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e] && e != eid) ==>
                        (cpu_1.tap_enclave_metadata_entrypoint[e] == cpu_2.tap_enclave_metadata_entrypoint[e]));
        // pc is the same except for the eid
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e] && e != eid) ==>
                        (cpu_1.tap_enclave_metadata_pc[e] == cpu_2.tap_enclave_metadata_pc[e]));
        // regs are the same except for the eid
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e] && e != eid) ==>
                        (cpu_1.tap_enclave_metadata_regs[e] == cpu_2.tap_enclave_metadata_regs[e]));
        // paused is the same except for the eid
        invariant (forall (e : tap_enclave_id_t) :: 
                    (cpu_1.tap_enclave_metadata_valid[e] && cpu_2.tap_enclave_metadata_valid[e]) ==>
                        (cpu_1.tap_enclave_metadata_paused[e] == cpu_2.tap_enclave_metadata_paused[e]));
    {
        if (current_mode == mode_untrusted) {
            havoc r_proof_op;   havoc r_eid;    havoc r_pc;   havoc r_read;   havoc r_write;
            havoc r_data;       havoc l_vaddr;  havoc s_vaddr;  havoc s_data;   havoc r_pt_eid;
            havoc r_pt_va;      havoc pt_eid;   havoc pt_vaddr; havoc pt_valid; havoc  pt_paddr;
            havoc  r_addr_valid; havoc r_addr_map; havoc r_excl_vaddr; havoc r_excl_map;            
            havoc r_bmap;     havoc r_container_valid; havoc r_container_data; havoc r_entrypoint;
            havoc r_l_way;    havoc  r_s_way;

            assume valid_regindex(r_read);
            assume valid_regindex(r_write);
            assume valid_cache_way_index(r_l_way);
            assume valid_cache_way_index(r_s_way);

  
            // trace_1

            call (observation_1, current_mode_1, enclave_dead_1, status_1, excp_1_1, excp_1_2, hit_1_1, hit_1_2) =
                                    cpu_1.ObserverStep(k_pt_observer_t, current_mode, eid, r_eid, r_proof_op, 
                                                r_pc, r_read, r_write, r_data, 
                                                l_vaddr, s_vaddr, s_data,
                                                r_pt_eid, r_pt_va,
                                                pt_eid, pt_vaddr, pt_valid, pt_paddr,
                                                r_addr_valid, r_addr_map, r_excl_vaddr,
                                                r_excl_map, r_container_valid, r_container_data,
                                                r_entrypoint, r_bmap,
                                                r_l_way, r_s_way);
            
            
            // trace_2
            call (observation_2, current_mode_2, enclave_dead_2, status_2, excp_2_1, excp_2_2, hit_2_1, hit_2_2) =
                                    cpu_2.ObserverStep(k_pt_observer_t, current_mode, eid, r_eid, r_proof_op, 
                                                r_pc, r_read, r_write, r_data, 
                                                l_vaddr, s_vaddr, s_data,
                                                r_pt_eid, r_pt_va,
                                                pt_eid, pt_vaddr, pt_valid, pt_paddr,
                                                r_addr_valid, r_addr_map, r_excl_vaddr,
                                                r_excl_map, r_container_valid, r_container_data,
                                                r_entrypoint, r_bmap,
                                                r_l_way, r_s_way);
            // some sanity checks.
            assert status_1 == status_2;
            assert current_mode_1 == current_mode_2;
            assert enclave_dead_1 == enclave_dead_2;
            current_mode = current_mode_1;
            enclave_dead = enclave_dead_2;
            //assert(false);
        } else {
            havoc e_proof_op;
            assume tap_proof_op_valid_in_enclave(e_proof_op);

            // trace_1
            call (current_mode_1, load_addr_1, l_way, store_addr_1, store_data_1, s_way) = 
                        cpu_1.EnclaveStep(current_mode, eid, e_proof_op);

            // trace_2
            call (current_mode_2, load_addr_2, l_way, store_addr_2, store_data_2, s_way) = 
                        cpu_2.EnclaveStep(current_mode, eid, e_proof_op);

            // some sanity checks.
            assert current_mode_1 == current_mode_2;
            current_mode = current_mode_1;

            assume (!e_excl_vaddr[load_addr_1] || !e_excl_vaddr[load_addr_2]) ==>
                       (load_addr_1 == load_addr_2 &&
                        cpu_1.cpu.cpu_addr_map[load_addr_1] == cpu_2.cpu.cpu_addr_map[load_addr_2]);
            assume (!e_excl_vaddr[store_addr_1] || !e_excl_vaddr[store_addr_2]) ==>
                       (store_addr_1 == store_addr_2 && store_data_1 == store_data_2 &&
                        cpu_1.cpu.cpu_addr_map[store_addr_1] == cpu_2.cpu.cpu_addr_map[store_addr_2]);
            //assert(false);
        }
        //assert(false);
    }
    //assert(false);
}

control {
  set_solver_option(":mbqi", false);
  set_solver_option(":case_split", 0);
  set_solver_option(":relevancy", 0);
  set_solver_option(":threads", 4);
  set_solver_option(":blast_full", true);
  set_solver_option(":timeout", 60000);
  verif_prove_conf_pt = verify(ProveConfidentialityPT);

  check;
  print_results;
}

}

